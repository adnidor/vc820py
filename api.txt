Modules implementing Functionality for a specific Multimeter MUST have the following:

A class named MultimeterMessage with an initializer taking a bytes object as an argument. The class MUST implement a sensible __str__()

The class must contain:
A constant named MESSAGE_LENGHT containing the length of a Message in bytes
A classmethod named check_first_byte which takes a single byte as a parameter and returns True if the passed byte is a possible ffirst byte for a Message, else False

Each object MUST contain:
A method named get_reading taking no arguments and returning a str containing the reading as shown on the Multimeter
A method named get_base_reading taking no arguments and returning a str containing the reading converted to the base unit
A method named get_json taking no arguments and returning a str containing a json object containing at least the following variables: raw_self, reading, base_reading, value, unit, mode
The following variables:
int value: contains the value shown on the multimeter
int base_value: contains the value converted to the base unit
int multiplier: contains the multiplier (0.001 for milli, 1000 for mega, etc.)
str unit: contains unit including prefix
str base_unit: contains unit excluding prefix
str mode: contains "AC", "DC" or ""
bool hold: contains the state of the hold function
bool rel: contains the state of the rel(delta) function
bytes raw_message: contains the raw message passed to __init__
